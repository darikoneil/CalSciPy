from __future__ import annotations
from typing import Tuple, Union, Sequence
from pathlib import Path
from functools import partial, cached_property
from collections import ChainMap
from numbers import Number

import numpy as np

from .bruker import CONSTANTS
from .bruker.xml_objects import GalvoPoint, GalvoPointList
from .roi_tools import ROI, import_suite2p_rois, generate_suite2p_reference_image


class Photostimulation:
    """
    Photostimulation object that defines patterned photostimulation during an optogenetic experiment

    :ivar rois: dictionary containing a collection of ROI objects for potential photostimulation
    :type rois: dict
    :ivar reference_image: a reference image containing the provided ROIs.
    :type reference_image: numpy.ndarray
    :ivar sequence: the sequence of individual photostimulation events
    """
    def __init__(self,
                 rois: dict,
                 etl_offset: float = 0.0,
                 pixels_per_micron: float = 0.883,
                 spiral_um_per_au: float = CONSTANTS.SPIRAL_SCALE,
                 x_range: Tuple[float, float] = CONSTANTS.X_GALVO_VOLTAGE_RANGE,
                 y_range: Tuple[float, float] = CONSTANTS.Y_GALVO_VOLTAGE_RANGE,
                 reference_image: np.ndarray = None,
                 ):
        """
        Photostimulation object that defines patterned photostimulation during an optogenetic experiment

        :param rois: dictionary containing a collection of ROI objects for potential photostimulation
        :param etl_offset: z-plane offset between imaging and stimulation focal planes
        :param pixels_per_micron: number of pixels per micron for the associated objective at 1.02X
        :param reference_image: a reference image containing the provided ROIs.
        :param spiral_um_per_au: the diameter of a '.gpl' spiral in microns when the metadata equals 1.0
        :param x_range: the range of the x coordinate in '.gpl' files
        :param y_range: the range of the y coordinate in '.gpl' files
        """
        self.rois = rois
        self.reference_image = reference_image
        self.sequence = None

    def __str__(self):
        return f"Photostimulation experiment targeting {self.targets} neurons from {len(self.rois)} total " \
               f"ROIs within {self.reference_image.shape[0]} x {self.reference_image.shape[1]} reference image (x, y)"

    @property
    def targets(self) -> int:
        return 15

    @staticmethod
    def __name__() -> str:
        return "Photostimulation"

    @classmethod
    def import_suite2p(cls: Photostimulation,
                       folder: Path,
                       reference_shape: Tuple[int, int] = (512, 512)
                       ) -> Photostimulation:
        """
        Class method which builds a photostimulation instance given suite2p data

        :param folder: folder containing suite2p data. The folder must contain the associated "stat.npy" file,
            though it is recommended the folder also contain the "iscell.npy" and "ops.npy" files
        :param reference_shape: if the provided folder does not contain the ops.npy file this value is used generate an
            approximate reference image
        :return: An instance of Photostimulation
        """
        # append suite2p + plane if necessary
        if "suite2p" not in str(folder):
            folder = folder.joinpath("suite2p")

        if "plane" not in str(folder):
            folder = folder.joinpath("plane0")

        stat = np.load(folder.joinpath("stat.npy"), allow_pickle=True)

        # use only neuronal rois if iscell is provided
        try:
            iscell = np.load(folder.joinpath("iscell.npy"), allow_pickle=True)
        except FileNotFoundError:
            stat[:] = stat
        else:
            stat = stat[np.where(iscell[:, 0] == 1)[0]]

        # if ops is provided then retrieve the reference image
        try:
            ops = np.load(folder.joinpath("ops.npy"), allow_pickle=True).item()
            reference_image = generate_suite2p_reference_image(ops)
        except FileNotFoundError:
            reference_image = np.ones(shape, )

        # convert rois in stat to the expected form
        rois = import_suite2p_rois(stat, reference_image.shape)

        # generate instance
        return Photostimulation(rois, reference_image=reference_image)


class Group:
    def __init__(self):
        """
        Photostimulation group object containing the index of rois to stimulate
        and relevant stimulation parameters

        :ivar order: a tuple containing the identity and stimulation order of the rois in this group
        :type order: Tuple[int]
        :ivar repetitions: an integer indicating the number of times to repeat the stimulation
        :type repetitions: int
        """
        self.order = None
        self.repetitions = 1


class Mask:
    """
    Photostimulation Mask object associated with some ROI. Generated by approximating the ROI as an ellipse. The bound
    mask is calculated by constraining the radius of the ellipse to the smaller radius (symmetry constraint)

    :param center: the centroid of the roi (y, x) calculated using the shoelace approximation
    :type center: Tuple[float, float]
    :param rc_vert: Nx2 array containing the r,c coordinate pairs comprising the roi's convex hull approximation
    :type rc_vert: numpy.ndarray
    :param radii: the long and short radii of the roi (long, short)
    :type radii: Tuple[float, float]
    :param theta: angle of the long axis of the roi with respective to the y-axis
    :type theta: float
    :param shape: the shape of the image from which the roi was generated
    :type shape: Tuple[int, int]

    :ivar xy: Nx2 array containing x,y coordinate pairs for the mask
    :type xy: numpy.ndarray
    :ivar xy_vert: Nx2 array containing the x,y coordinate pairs comprising the mask's convex hull approximation
    :type xy_vert: numpy.ndarray
    :ivar rc: Nx2 array containing the r,c coordinate pairs for the mask
    :type rc: numpy.ndarray
    :ivar rc_vert: Nx2 array containing the r,c coordinate pairs comprising the mask's convex hull approximation
    :type rc_vert: numpy.ndarray
    :ivar bound_xy: Nx2 array containing x,y coordinate pairs for the mask
    :type bound_xy: numpy.ndarray
    :ivar bound_xy_vert: Nx2 array containing the x,y coordinate pairs comprising the mask's convex hull approximation
    :type bound_xy_vert: numpy.ndarray
    :ivar bound_rc: Nx2 array containing the r,c coordinate pairs for the mask
    :type bound_rc: numpy.ndarray
    :ivar bound_rc_vert: Nx2 array containing the r,c coordinate pairs comprising the mask's convex hull approximation
    :type bound_rc_vert: numpy.ndarray
    :ivar bound_radius: radius used for constraining the bound mask
    :type bound_radius: float
    """
    def __init__(self,
                 center: Tuple[float, float],
                 rc_vert: np.ndarray,
                 radii: Tuple[float, float],
                 theta: float,
                 shape: Tuple[int, int]):
        """
        Photostimulation Mask object associated with some ROI

        :param center: the centroid of the roi (y, x) calculated using the shoelace approximation
        :param rc_vert: Nx2 array containing the r,c coordinate pairs comprising the roi's convex hull approximation
        :param radii: the long and short radii of the roi (long, short)
        :param theta: angle of the long axis of the roi with respective to the y-axis
        :param shape: the shape of the image from which the roi was generated

        """

        self.center = center
        self._rc_vert = rc_vert
        self.radii = radii
        self.theta = theta
        self.shape = shape

    def __str__(self):
        return f"Photostimulation mask centered at {self.center} with radii {self.radii} (bound: {self.bound_radius})" \
               f"with theta {self.theta}'"

    @cached_property
    def _mask(self) -> np.ndarray:
        """
        Photostimulation mask calculated using center, long/short radii, and theta constrained to lie within shape

        """
        y, x = calculate_mask(self.center, self.radii, self.shape)
        return np.vstack([x, y]).T

    @cached_property
    def _mask_vertices(self) -> Tuple[int]:
        """
        Indices of photostimulation points comprising the convex hull approximation of the photostimulation mask

        """
        hull = ConvexHull(self._mask)
        return hull.vertices

    @cached_property
    def bound_radius(self) -> float:
        """
        Radius used for constraining the bound mask

        """
        return calculate_bounding_radius(self.center, self.rc_vert)

    @cached_property
    def _bound_mask(self) -> np.ndarray:
        """
        Bound photostimulation mask calculated using center, the bound radius, and constrained to lie within shape

        """
        y, x = calculate_mask(self.center, self.bound_radius, self.shape)
        return np.vstack([x, y]).T

    @cached_property
    def _bound_vertices(self) -> Tuple[int]:
        """
        Indices of photostimulation points comprising the convex hull approximation of the bound photostimulation mask

        """
        hull = ConvexHull(self._bound_mask)
        return hull.vertices

    @property
    def bound_xy(self) -> np.ndarray:
        """
        Nx2 array containing x,y coordinate pairs for the mask

        """
        return self._bound_mask

    @property
    def bound_rc(self) -> np.ndarray:
        """
        Nx2 array containing the r,c coordinate pairs for the mask

        """
        return np.vstack([self._bound_mask[:, 1], self._bound_mask[:, 0]]).T

    @property
    def bound_xy_vert(self) -> np.ndarray:
        """
        Nx2 array containing the x,y coordinate pairs comprising the mask's convex hull approximation

        """
        return self.bound_xy[self._bound_vertices, :]

    @property
    def bound_rc_vert(self) -> np.ndarray:
        """
        Nx2 array containing the r,c coordinate pairs comprising the mask's convex hull approximation

        """
        return self.bound_rc[self._bound_vertices, :]

    @property
    def xy(self) -> np.ndarray:
        """
        Nx2 array containing x,y coordinate pairs for the mask

        """
        return self._mask

    @property
    def rc(self) -> np.ndarray:
        """
        Nx2 array containing the r,c coordinate pairs for the mask

        """
        return np.vstack([self._mask[:, 1], self._mask[:, 0]]).T

    @property
    def xy_vert(self) -> np.ndarray:
        """
        Nx2 array containing the x,y coordinate pairs comprising the mask's convex hull approximation

        """
        return self.xy[self._mask_vertices, :]

    @property
    def rc_vert(self) -> np.ndarray:
        """
        Nx2 array containing the r,c coordinate pairs comprising the mask's convex hull approximation

        """
        return self.rc[self._mask_vertices, :]

    @staticmethod
    def __name__() -> str:
        return "Photostimulation Mask"

    def __repr__(self):
        return "Photostimulation Mask(" + "".join([f"{key}: {value} " for key, value in vars(self).items()]) + ")"
